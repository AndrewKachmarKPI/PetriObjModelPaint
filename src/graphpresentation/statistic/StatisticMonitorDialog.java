/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package graphpresentation.statistic;

import graphpresentation.PetriNetsFrame;
import graphpresentation.statistic.services.charts.ChartBuilderService;
import graphpresentation.statistic.services.charts.LineChartBuilderService;
import graphpresentation.statistic.dto.ChartConfigDto;
import graphpresentation.statistic.dto.PetriElementStatisticDto;
import graphpresentation.statistic.enums.PetriStatFunction;
import graphpresentation.statistic.services.formula.FormulaBuilderService;
import graphpresentation.statistic.services.formula.FormulaBuilderServiceImpl;
import javafx.embed.swing.JFXPanel;
import javafx.scene.chart.XYChart;

import javax.swing.*;
import javax.swing.border.Border;
import java.awt.*;
import java.awt.event.*;
import java.io.File;
import java.util.List;

/**
 * @author Andrii Kachmar
 */
public class StatisticMonitorDialog extends javax.swing.JDialog {
    private final ChartBuilderService lineChartBuilderService;
    private final FormulaBuilderService formulaBuilderService;
    private List<String> selectedElements;
    private Boolean isFormulaValid;
    private ChartConfigDto chartConfigDto;


    /**
     * Creates new form StatisticMonitorDialog
     */
    public StatisticMonitorDialog(PetriNetsFrame parent, boolean modal) {
        super(parent, modal);
        this.parent = parent;
        this.jfxPanel = new JFXPanel();
        this.formulaBuilderService = new FormulaBuilderServiceImpl(parent);
        initComponents();

        this.chartConfigDto = new ChartConfigDto(
                "Petri simulation statistic",
                "Simulation time",
                "Petri metric",
                "Values"
        );
        this.lineChartBuilderService = new LineChartBuilderService();
        lineChartBuilderService.createChart(jfxPanel, chartConfigDto);
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        contentLayout = new javax.swing.JSplitPane();
        formulaBarPanel = new javax.swing.JPanel();
        formulaActionsGroup = new javax.swing.JPanel();
        clearFormulaBtn = new javax.swing.JButton();
        formulaInfoBtn = new javax.swing.JButton();
        formulaPanel = new javax.swing.JScrollPane();
        formulaInputField = new javax.swing.JTextArea();
        mainContentPanel = new javax.swing.JPanel();
        contentTabs = new javax.swing.JTabbedPane();
        chartViewPanel = new javax.swing.JPanel();
        chartActionsBar = new javax.swing.JMenuBar();
        tableViewPanel = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Statistic monitor");
        setPreferredSize(new java.awt.Dimension(845, 600));

        contentLayout.setDividerLocation(50);
        contentLayout.setDividerSize(3);
        contentLayout.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        contentLayout.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        contentLayout.setMinimumSize(new java.awt.Dimension(80, 40));
        contentLayout.setPreferredSize(new java.awt.Dimension(845, 40));

        formulaBarPanel.setPreferredSize(new java.awt.Dimension(314, 70));
        formulaBarPanel.setLayout(new java.awt.BorderLayout());

        formulaActionsGroup.setLayout(new java.awt.GridBagLayout());

        clearFormulaBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/utils/reset_icon.png"))); // NOI18N
        clearFormulaBtn.setContentAreaFilled(false);
        clearFormulaBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        clearFormulaBtn.setPreferredSize(new java.awt.Dimension(40, 40));
        clearFormulaBtn.setToolTipText("Clear chart");
        clearFormulaBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearFormulaBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        formulaActionsGroup.add(clearFormulaBtn, gridBagConstraints);

        formulaInfoBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/utils/fx_icon.png"))); // NOI18N
        formulaInfoBtn.setContentAreaFilled(false);
        formulaInfoBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        formulaInfoBtn.setPreferredSize(new java.awt.Dimension(40, 40));
        formulaInfoBtn.setToolTipText("Available formulas");
        formulaInfoBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                formulaInfoBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        formulaActionsGroup.add(formulaInfoBtn, gridBagConstraints);

        formulaBarPanel.add(formulaActionsGroup, java.awt.BorderLayout.LINE_START);

        formulaPanel.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        formulaPanel.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);
        formulaPanel.setPreferredSize(new java.awt.Dimension(234, 60));

        formulaInputField.setLineWrap(true);
        formulaInputField.setBorder(BorderFactory.createCompoundBorder(formulaInputField.getBorder(),
                BorderFactory.createEmptyBorder(5, 5, 5, 5)));
        formulaInputField.setFont(new Font("Consolas", Font.PLAIN, 14));
        formulaInputField.setToolTipText("Enter your formula...");
        formulaInputField.setPreferredSize(new java.awt.Dimension(232, 20));
        formulaInputField.addKeyListener(new KeyAdapter() {
            @Override
            public void keyReleased(KeyEvent e) {
                onFormulaFieldChange(e);
            }
        });
        formulaPanel.setViewportView(formulaInputField);
        formulaSuggestionPopup = new JPopupMenu();

        formulaBarPanel.add(formulaPanel, java.awt.BorderLayout.CENTER);

        contentLayout.setTopComponent(formulaBarPanel);

        mainContentPanel.setLayout(new javax.swing.BoxLayout(mainContentPanel, javax.swing.BoxLayout.LINE_AXIS));
        chartViewPanel.setLayout(new BorderLayout());
        chartViewPanel.setBackground(Color.decode("#f4f4f4"));

        chartSettingsBtn = new JButton("Chart settings");
        chartSettingsBtn.setPreferredSize(new Dimension(100, 40));
        chartSettingsBtn.setHorizontalAlignment(SwingConstants.CENTER);
        chartSettingsBtn.setVerticalAlignment(SwingConstants.CENTER);
        chartSettingsBtn.setContentAreaFilled(false);
        chartSettingsBtn.setToolTipText("Chart settings");
        chartSettingsBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        chartSettingsBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/utils/settings_icon.png")));
        chartSettingsBtn.addActionListener(this::onChartSettingOpenPerformed);

        chartDownloadBtn = new JButton("Download chart");
        chartDownloadBtn.setPreferredSize(new Dimension(100, 40));
        chartDownloadBtn.setHorizontalAlignment(SwingConstants.CENTER);
        chartDownloadBtn.setVerticalAlignment(SwingConstants.CENTER);
        chartDownloadBtn.setContentAreaFilled(false);
        chartDownloadBtn.setToolTipText("Download chart");
        chartDownloadBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        chartDownloadBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/utils/download_icon.png")));
        chartDownloadBtn.addActionListener(this::onChartDownloadPerformed);

        exportCsvBtn = new JButton("Export csv");
        exportCsvBtn.setPreferredSize(new Dimension(100, 40));
        exportCsvBtn.setHorizontalAlignment(SwingConstants.CENTER);
        exportCsvBtn.setVerticalAlignment(SwingConstants.CENTER);
        exportCsvBtn.setContentAreaFilled(false);
        exportCsvBtn.setToolTipText("Export statistic in csv");
        exportCsvBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        exportCsvBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/utils/export_csv_icon.png")));
        exportCsvBtn.addActionListener(this::onExportCsvPerformed);

        UIManager.put("MenuBar.background", Color.decode("#f4f4f4"));
        chartActionsBar.add(chartSettingsBtn);
        chartActionsBar.add(chartDownloadBtn);
        chartActionsBar.add(exportCsvBtn);
        chartActionsBar.setPreferredSize(new Dimension(100, 30));

        chartViewPanel.add(chartActionsBar, BorderLayout.NORTH);
        chartViewPanel.add(jfxPanel, BorderLayout.CENTER);

        contentTabs.addTab("Chart view", chartViewPanel);

        javax.swing.GroupLayout tableViewPanelLayout = new javax.swing.GroupLayout(tableViewPanel);
        tableViewPanel.setLayout(tableViewPanelLayout);
        tableViewPanelLayout.setHorizontalGroup(
                tableViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 845, Short.MAX_VALUE)
        );
        tableViewPanelLayout.setVerticalGroup(
                tableViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 470, Short.MAX_VALUE)
        );

        contentTabs.addTab("Table view", tableViewPanel);

        mainContentPanel.add(contentTabs);

        contentLayout.setRightComponent(mainContentPanel);

        getContentPane().add(contentLayout, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formulaInfoBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_formulaInfoBtnActionPerformed
        SelectFunctionDialog selectFunctionDialog = new SelectFunctionDialog(this.parent, true);
        selectFunctionDialog.setLocationRelativeTo(this);
        selectFunctionDialog.setVisible(true);
        PetriStatFunction selectedFunction = selectFunctionDialog.getSelectedFunction();
        if (selectedFunction != null) {
            String formula = formulaBuilderService.updateFormula(formulaInputField.getText(), selectedFunction.getFunctionName());
            formulaInputField.setText(formula);
            onFormulaFieldChange(null);
        }
    }//GEN-LAST:event_formulaInfoBtnActionPerformed

    private void clearFormulaBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearFormulaBtnActionPerformed
        lineChartBuilderService.clearChart();
    }//GEN-LAST:event_clearFormulaBtnActionPerformed

    private void onChartSettingOpenPerformed(java.awt.event.ActionEvent evt) {
        ChartSettingsDialog chartSettingsDialog = new ChartSettingsDialog(parent, true, chartConfigDto, lineChartBuilderService);
        chartSettingsDialog.setLocationRelativeTo(this);
        chartSettingsDialog.setVisible(true);
    }

    private void onChartDownloadPerformed(java.awt.event.ActionEvent evt) {
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int option = fileChooser.showOpenDialog(this);
        if (option == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            String fileName = file.getAbsolutePath() + "/" + chartConfigDto.getTitle() + ".png";
            lineChartBuilderService.downloadChart(fileName);
        }
    }

    private void onExportCsvPerformed(java.awt.event.ActionEvent evt) {

    }

    private void onFormulaFieldChange(KeyEvent e) {
        String formula = formulaInputField.getText().trim();
        if (formula.isEmpty()) {
            return;
        }
        this.selectedElements = formulaBuilderService.getSelectedPetriElementNames(formula);
        this.isFormulaValid = formulaBuilderService.isFormulaValid(formula);

        List<String> suggestions = formulaBuilderService.getFormulaSuggestions(formula);
        updateFormulaSuggestions(suggestions);
        updateFormulaField();


//        char keyChar = e.getKeyChar();
//        if (Character.isLetterOrDigit(keyChar) || keyChar == KeyEvent.VK_BACK_SPACE) {
//            showFormulaSuggestions();
//        } else if (e.getKeyCode() == KeyEvent.VK_DOWN && formulaSuggestionPopup.isVisible()) {
//            formulaSuggestionPopup.requestFocusInWindow();
//        } else if (e.getKeyCode() == KeyEvent.VK_ENTER && formulaSuggestionPopup.isVisible()) {
//            formulaSuggestionPopup.setVisible(false);
//        }
    }

    private void updateFormulaSuggestions(List<String> suggestions) {
        formulaSuggestionPopup.setVisible(false);
        if (!suggestions.isEmpty()) {
            formulaSuggestionPopup.removeAll();
            for (String suggestion : suggestions) {
                JMenuItem item = new JMenuItem(suggestion);
                item.addActionListener(e -> {
                    String formula = formulaBuilderService.updateFormula(formulaInputField.getText(), suggestion);
                    formulaInputField.setText(formula);
                    formulaSuggestionPopup.setVisible(false);
                });
                formulaSuggestionPopup.add(item);
            }
            Point position = formulaInputField.getCaret().getMagicCaretPosition();
            if (position != null) {
                formulaSuggestionPopup.show(formulaInputField, position.x, position.y + formulaInputField.getFontMetrics(formulaInputField.getFont()).getHeight());
            } else {
                formulaSuggestionPopup.show(formulaInputField, 0, formulaInputField.getHeight());
            }
            formulaInputField.requestFocus();
        }
    }

    private void updateFormulaField() {
        Border border = BorderFactory.createLineBorder(isFormulaValid ? Color.GREEN : Color.RED, 2);
        formulaInputField.setBorder(BorderFactory.createCompoundBorder(border,
                BorderFactory.createEmptyBorder(5, 5, 5, 5)));
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private java.awt.Frame parent;
    private javax.swing.JPanel chartViewPanel;
    private javax.swing.JMenuBar chartActionsBar;
    private javax.swing.JButton clearFormulaBtn;
    private javax.swing.JButton chartSettingsBtn;
    private javax.swing.JButton chartDownloadBtn;
    private javax.swing.JButton exportCsvBtn;
    private javax.swing.JSplitPane contentLayout;
    private javax.swing.JTabbedPane contentTabs;
    private javax.swing.JPanel formulaActionsGroup;
    private javax.swing.JPanel formulaBarPanel;
    private javax.swing.JButton formulaInfoBtn;
    private javax.swing.JTextArea formulaInputField;
    private javax.swing.JScrollPane formulaPanel;
    private javax.swing.JPanel mainContentPanel;
    private javax.swing.JPanel tableViewPanel;
    private javax.swing.JLayeredPane chartContentPane;
    private javax.swing.JPopupMenu formulaSuggestionPopup;
    private final JFXPanel jfxPanel;
    // End of variables declaration//GEN-END:variables

    public List<String> getSelectedElementNames() {
        return selectedElements;
    }

    public boolean getIsFormulaValid() {
        return isFormulaValid;
    }

    public void sendStatistic(double currentTime, List<PetriElementStatisticDto> statistics) {
        if (!isFormulaValid) {
            return;
        }
        statistics.forEach(System.out::println);
        Number formulaValue = formulaBuilderService.calculateFormula(formulaInputField.getText(), statistics);
        if (formulaValue != null) {
            System.out.println("Result value:" + formulaValue);
            lineChartBuilderService.appendData(new XYChart.Data<>(currentTime, formulaValue));
        }
    }

    public void onSimulationStart() {
        formulaInputField.setEnabled(false);
        formulaInfoBtn.setEnabled(false);
        clearFormulaBtn.setEnabled(false);
        lineChartBuilderService.changeSeriesName(formulaInputField.getText());
    }

    public void onSimulationEnd() {
        formulaInputField.setEnabled(true);
        formulaInfoBtn.setEnabled(true);
        clearFormulaBtn.setEnabled(true);
    }
}
